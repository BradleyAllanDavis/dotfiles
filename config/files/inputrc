# This file controls the behaviour of line input editing for
# programs that use the GNU Readline library

# Set bell to be visual
set prefer-visible-bell on

# Make Tab autocomplete regardless of filename case
set completion-ignore-case on

# List all matches in case multiple possible completions are possible
set show-all-if-ambiguous on

# Immediately add a trailing slash when autocompleting symlinks to directories
set mark-symlinked-directories on

# Use the text that has already been typed as the prefix for searching through
# commands (i.e. more intelligent Up/Down behavior)
"\e[B": history-search-forward
"\e[A": history-search-backward

# Do not autocomplete hidden files unless the pattern explicitly begins with a dot
# set match-hidden-files off

# Show all autocomplete results at once
set page-completions off

# If there are more than 100 possible completions for a word, ask to show them all
set completion-query-items 100

# Show extra file information when completing, like `ls -F` does
set visible-stats on

# Be more intelligent when autocompleting by also looking at the text after
# the cursor. For example, when the current line is "cd ~/src/mozil", and
# the cursor is on the "z", pressing Tab will not autocomplete it to "cd
# ~/src/mozillail", but to "cd ~/src/mozilla". (This is supported by the
# Readline used by Bash 4.)
set skip-completed-text on

# Allow UTF-8 input and output, instead of showing stuff like $'\0123\0456'
set input-meta on
set output-meta on
set convert-meta off

# Allows for vim type key combos in the shell and python interpreter
set editing-mode vi

# set keymap vi-insert
# "\e[1;5C": forward-word   # ctrl + right
# "\e[1;5D": backward-word  # ctrl + left
# "\C-b": backward-word  # ctrl + b
# "\C-e": end-of-line  # ctrl + e
# "\C-a": beginning-of-line  # ctrl + e
# "\C-d": delete-char  # ctrl + d

# Vim word object commands
# Make sure to use updated bash
set keymap vi-command
"#": insert-comment
".": "i !*\r"
"|": "A | "
"D":kill-line
"C": "Da"
"dw": kill-word
"dd": kill-whole-line
"db": backward-kill-word
"cc": "ddi"
"cw": "dwi"
"cb": "dbi"
"daw": "lbdW"
"yaw": "lbyW"
"caw": "lbcW"
"diw": "lbdw"
"yiw": "lbyw"
"ciw": "lbcw"
"da\"": "lF\"df\""
"di\"": "lF\"lmtf\"d`t"
"ci\"": "di\"i"
"ca\"": "da\"i"
"da'": "lF'df'"
"di'": "lF'lmtf'd`t"
"ci'": "di'i"
"ca'": "da'i"
"da`": "lF\`df\`"
"di`": "lF\`lmtf\`d`t"
"ci`": "di`i"
"ca`": "da`i"
"da(": "lF(df)"
"di(": "lF(lmtf)d`t"
"ci(": "di(i"
"ca(": "da(i"
"da)": "lF(df)"
"di)": "lF(lmtf)d`t"
"ci)": "di(i"
"ca)": "da(i"
"da{": "lF{df}"
"di{": "lF{lmtf}d`t"
"ci{": "di{i"
"ca{": "da{i"
"da}": "lF{df}"
"di}": "lF{lmtf}d`t"
"ci}": "di}i"
"ca}": "da}i"
"da[": "lF[df]"
"di[": "lF[lmtf]d`t"
"ci[": "di[i"
"ca[": "da[i"
"da]": "lF[df]"
"di]": "lF[lmtf]d`t"
"ci]": "di]i"
"ca]": "da]i"
"da<": "lF<df>"
"di<": "lF<lmtf>d`t"
"ci<": "di<i"
"ca<": "da<i"
"da>": "lF<df>"
"di>": "lF<lmtf>d`t"
"ci>": "di>i"
"ca>": "da>i"
"gg": beginning-of-history
"G": end-of-history
?: reverse-search-history
/: forward-search-history

# set show-mode-in-prompt on
# set vi-ins-mode-string "\1\e[1;37m\2+ \1\e[0m\2"
# set vi-cmd-mode-string "\1\e[1;37m\2: \1\e[0m\2"
# set keymap vi-command

# set vi-ins-mode-string "\1\e[6 q\2"
# set vi-cmd-mode-string "\1\e[2 q\2"

# optionally:
# switch to block cursor before executing a command
# set keymap vi-insert
# RETURN: "\e\n"
