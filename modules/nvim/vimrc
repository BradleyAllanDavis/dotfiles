" Install Plug {{{
if has('nvim')
  if empty(glob('~/.config/nvim/autoload/plug.vim'))
    silent !curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs --insecure
          \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
  endif
  call plug#begin('~/.config/nvim/bundle')
else
  if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs --insecure
          \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
  endif
  call plug#begin('~/.vim/bundle')
endif
" }}}
" Plugins {{{
" Core {{{
Plug 'altercation/vim-colors-solarized' " Solarized colorscheme
Plug 'scrooloose/nerdTree'              " File browser
Plug 'vim-airline/vim-airline'          " Improved status line and buffer viewing
Plug 'vim-airline/vim-airline-themes'   " Themes for Airline
Plug 'ntpeters/vim-better-whitespace'   " Trailing whitespace indicator
Plug 'Yggdroot/indentLine'              " Leading whitespace indicators (indentation)
Plug 'danro/rename.vim'                 " Easy renaming
Plug 'terryma/vim-expand-region'        " Expand visual selection more easily
" Plug 'ervandew/supertab'                " Improved tab key functioning
" if has("undofile")
" if has('persistent_undo')
Plug 'pixelastic/vim-undodir-tree'      " Fix long path name with persistent undo
Plug 'editorconfig/editorconfig-vim'    " Project formatting configuration
" endif
" }}}
" Nix/NixOS {{{
Plug 'LnL7/vim-nix'
" }}}
" LSP {{{
" vim-lsp
" Plug 'prabirshrestha/vim-lsp'
" Plug 'mattn/vim-lsp-settings'
" Autocomplete
" Plug 'prabirshrestha/asyncomplete.vim'
" Plug 'prabirshrestha/asyncomplete-lsp.vim'

" COC
Plug 'neoclide/coc.nvim', {'branch': 'release'}
" }}}
" tpope {{{
Plug 'tpope/vim-sensible'               " Defaults everyone can agree on
Plug 'tpope/vim-commentary'             " Comment stuff out
Plug 'tpope/vim-sleuth'                 " Heuristically set buffer options
Plug 'tpope/vim-dispatch'               " Async build and test dispatcher
Plug 'tpope/vim-surround'               " Quoting/paranthesizing made simple
Plug 'tpope/vim-obsession'              " Continuously updated session files
" }}}
" Git {{{
Plug 'tpope/vim-fugitive'               " Git wrapper
" Plug 'mhinz/vim-signify'                " Show VCS changes in gutter
Plug 'kshenoy/vim-signature'            " Show marks in gutter
Plug 'Xuyuanp/nerdtree-git-plugin'      " Git information for nerdtree
" }}}
" Search {{{
Plug 'junegunn/fzf', { 'do': './install --bin --key-bindings --completion' }
Plug 'junegunn/fzf.vim'                 " Fuzzy Finder
Plug 'junegunn/vim-slash'               " Make search nicer
Plug 'dyng/ctrlsf.vim'                  " Keyword/ack search
Plug 'henrik/vim-indexed-search'        " Additional search (/) information
" }}}
" Tmux {{{
Plug 'christoomey/vim-tmux-navigator'   " Vim/Tmux navigation integration
Plug 'tmux-plugins/vim-tmux'            " Helps with tmux things
" Plug 'edkolev/tmuxline.vim'             " Tmux statusline customization
" }}}
" Mac {{{
" if has('mac')
"   Plug 'junegunn/vim-xmark' { 'do': 'make' } " Markdown preview
" endif
" }}}
" Ranger {{{
if has('nvim')
  Plug 'rbgrouleff/bclose.vim'
endif
Plug 'francoiscabrol/ranger.vim'
" }}}
" junegunn {{{
Plug 'junegunn/vim-easy-align'          " Easy alignment
" Plug 'junegunn/goyo.vim'                " Distraction free writing
" Plug 'junegunn/limelight.vim'           " Hyper focus highlighting
" Plug 'junegunn/vim-peekaboo'            " View registers from within insert mode
" }}}
" Web Dev {{{
Plug 'mattn/emmet-vim'                  " Expanding abbreviations for HTML
" Plug 'gregsexton/MatchTag'              " Highlight matching HTML tag
Plug 'alvan/vim-closetag'               " HTML
" Plug 'Valloric/MatchTagAlways'          " HTML
" }}}
" Syntax Checking {{{
if has('nvim')
  " Plug 'w0rp/ale'
  " Plug 'benekastah/neomake'
else
  Plug 'scrooloose/syntastic'
endif
" }}}
" Autocompletion {{{
if has('nvim')
  " Plug 'shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
  " Plug 'benekastah/neomake'
else
  " Plug 'Valloric/YouCompleteMe'           " Autocompletion
endif
" }}}
" Python {{{
" Plug 'nvie/vim-flake8'                  " Python linting
" Plug 'kh3phr3n/python-syntax'
" Plug 'hdima/python-syntax'
Plug 'kh3phr3n/python-syntax',     { 'for': [ 'python' ] }
" }}}
" Filetype {{{
" Plug 'vmchale/just-vim'                 " Justfiles
Plug 'NoahTheDuke/vim-just'             " Justfiles
" Plug 'sheerun/vim-polyglot'             " Collection of language packs
" Plug 's3rvac/AutoFenc'                  " Detect file encoding
" Plug 'jparise/vim-graphql'              " GraphQL filetype
" Plug 'martinda/Jenkinsfile-vim-syntax'  " Jenkinsfile filetype
" Plug 'fatih/vim-go'                     " Go
" Plug 'robbles/logstash.vim'             " Logstash
" Plug 'derekwyatt/vim-scala'             " Scala filetype
" Plug 'shmup/vim-sql-syntax',       { 'for': [ 'sql' ] }
" Plug 'darfink/vim-plist',          { 'for': [ 'plist' ] }
" Plug 'chrisbra/csv.vim',           { 'for': [ 'csv' ] }
" Plug 'andreshazard/vim-logreview', { 'for': [ 'log' ] }
" Plug 'justinmk/vim-syntax-extra'        " C highlighting, questionably better
" Plug 'artur-shaik/vim-javacomplete2'    " Java Auto-completion
" Plug 'sukima/xmledit'                   " XML highlighting
" Plug 'jhradilek/vim-docbk'              " DocBook highlighting
" Plug 'pangloss/vim-javascript'          " JavaScript
" Plug 'burnettk/vim-angular'             " Angular
" Plug 'fidian/hexmode'                   " Hex, will not work with remapped esc key
" Plug 'vim-scripts/python.vim--Vasiliev' " Extra python highlighting
" Plug 'klen/python-mode'                 " PyLint, Rope, Pydoc, breakpoints from box
" Plug 'kballard/vim-swift'               " Swift
" Plug 'leafgarland/typescript-vim'       " TypeScript
" Plug 'lervag/vimtex'                    " Latex filetype
" }}}
" Unused {{{
" Plug 'powerline/fonts'                  " Use to install fonts, then remove
" Plug 'ryanoasis/vim-devicons'           " Nerd fonts I think
" Plug 'flazz/vim-colorschemes'           " Colorscheme pack
" Plug 'majutsushi/tagbar'                " Outline/tags view
" Plug 'vim-scripts/vim-svngutter'        " Show SVN changes in gutter
" Plug 'SirVer/ultisnips'                 " Snippets
" Plug 'honza/vim-snippets'               " Snippets
" Plug 'Townk/vim-autoclose'              " Auto close parantheses and brackets
" Plug 'skammer/vim-css-color'            " Allows for previews of CSS colors
" Plug 'jiangmiao/auto-pairs'             " Automatic closing of quotes/parantheses/brackets
" Plug 'nathanaelkane/vim-indent-guides'  " Indentation guides
" Plug 'janko-m/vim-test'                 " ?
" Plug 'scrooloose/nerdcommenter'         " Easy comment generation
" Plug 'ajh17/VimCompletesMe'             " Code completion
" Plug 'lifepillar/vim-mucomplete'        " Code completion
" Plug 'jmcantrell/vim-virtualenv'        " Virtualenv support
" Plug 'chrisbra/Colorizer'               " Color previewer
" Plug 'artur-shaik/vim-javacomplete2'    " Java Autocomplete
" Plug 'terryma/vim-smooth-scroll'        " Smoother scrolling
" }}}

" New
" Plug 'ktonga/vim-follow-my-lead'          " List leader mappings
" Plug 'wakatime/vim-wakatime'              " Track programming time
" Plug 'xuhdev/vim-latex-live-preview'      " Preview latex live
Plug 'brooth/far.vim'

call plug#end()
" }}}
" Plugin Configuration {{{
" lsp {{{
" vim-lsp
" if executable('nil')
"   autocmd User lsp_setup call lsp#register_server({
"     \ 'name': 'nil',
"     \ 'cmd': {server_info->['nil']},
"     \ 'whitelist': ['nix'],
"     \ })
" endif
" }}}
" COC {{{
" Use tab for trigger completion with characters ahead and navigate
" NOTE: There's always complete item selected by default, you may want to enable
" no select by `"suggest.noselect": true` in your configuration file
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction
" }}}
" Syntastic {{{
" Recommended settings
" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 1
" let g:syntastic_check_on_open = 0
" let g:syntastic_check_on_wq = 0

let g:syntastic_loc_list_height=6

let g:syntastic_python_checkers=['pylint']
" }}}
" Airline {{{
" Disable loading any extension in runtime path, improves startup performance
let g:airline#extensions#disable_rtp_load = 1

" Show buffers as tabs on top, show just filename
let g:airline#extensions#tabline#enabled=1
let g:airline#extensions#tabline#fnamemod=':t'

" Rename label for buffers (default: 'buffers')
let g:airline#extensions#tabline#buffers_label = ''

" Tmuxline integration
" let g:airline#extensions#tmuxline#enabled = 1

" Hide error and warning sections as they are annoying
let g:airline_section_error=0
let g:airline_section_warning=0

" Fonts
let g:airline_powerline_fonts=1
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

" Unicode Symbols
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.whitespace = 'Ξ'

" Airline Symbols
" let g:airline_left_sep = ''
" let g:airline_left_sep = '»'
" let g:airline_left_sep = '▶'
" let g:airline_left_alt_sep = ''
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''

" let g:airline_right_sep = ''
" let g:airline_right_sep = '«'
" let g:airline_right_sep = '◀'
" let g:airline_right_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''

let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''

" Shortform text for displaying mode
let g:airline_mode_map = {
      \ '__' : '-',
      \ 'n'  : 'NORM',
      \ 'i'  : 'INS',
      \ 'R'  : 'REP',
      \ 'c'  : 'C',
      \ 'v'  : 'VIS',
      \ 'V'  : 'LINE',
      \ '' : 'BLOCK',
      \ 's'  : 'S',
      \ 'S'  : 'S',
      \ '' : 'S',
      \ }
" }}}
" NERDTree {{{
" let g:NERDTreeMapQuit=<ESC>

" Show hidden files by default
let NERDTreeShowHidden=1

" Scrolloff
let g:NERDTreeAutoCenterThreshold=3

" Change size of window
let g:NERDTreeWinSize=30

" Enable bookmarks menu
let NERDTreeShowBookmarks=0

" Close NERDTree on opening a file
let NERDTreeQuitOnOpen=1

let NERDTreeDirArrows=0
" let NERDTreeDirArrowExpandable='+'
" let NERDTreeDirArrowCollapsible='-'

" Ignore and sort priority order
let NERDTreeIgnore=['\.vim$', '\~$', '\.pyc$', '\.swp$', '\~$']
let NERDTreeSortOrder=['^__\.py$', '\/$', '*', '\.swp$', '\~$']

" Open NERDTree automatically when vim starts and no files are specified
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" Close vim if only NERDTree is left open
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

"let g:NERDTreeIndicatorMapCustom = {
"      \ "Modified"  : "~",
"      \ "Staged"    : "✚",
"      \ "Untracked" : "?",
"      \ "Renamed"   : "➜",
"      \ "Unmerged"  : "═",
"      \ "Deleted"   : "✖",
"      \ "Dirty"     : "!",
"      \ "Clean"     : "✔︎",
"      \ 'Ignored'   : '☒',
"      \ "Unknown"   : "?"
"      \ }
" }}}
" Tagbar {{{
" Sort by order in file instead of alphabetical
let g:tagbar_sort=0

" Show line numbers
let g:tagbar_show_linenumbers=1

" Number of lines to indent
let g:tagbar_indent=1

" Show visiblity symbols (private/protected/public)
let g:tagbar_show_visibility=0

" Width of tagbar window
let g:tagbar_width=35

" Don't autoclose when selecting tag
let g:tagbar_autoclose=1

" Single to jump to definition
let g:tagbar_singleclick=1

" Autofocus when opening
let g:tagbar_autofocus=1

" }}}
" Python-mode {{{
let g:pymode_syntax = 0
" let g:pymode_syntax_all = 0
" let g:pymode_syntax_highlight_self = g:pymode_syntax_all
" let g:pymode_syntax_indent_errors = g:pymode_syntax_all
" let g:pymode_syntax_space_errors = g:pymode_syntax_all
" let g:pymode_syntax_builtin_objs = g:pymode_syntax_all
" let g:pymode_syntax_builtin_types = g:pymode_syntax_all
" let g:pymode_syntax_highlight_exceptions = g:pymode_syntax_all
" let g:pymode_syntax_docstrings = g:pymode_syntax_all

" let g:pymode_warnings = 1
" let g:pymode_lint = 0
" let g:pymode_rope = 0
" let g:pymode_rope_lookup_project = 0
" let g:pymode_options_colorcolumn = 0
" }}}
" CtrlSF {{{
" Search through root of project
let g:ctrlsf_default_root = 'project'

" Size of window
" let g:ctrlsf_winsize = '26'
let g:ctrlsf_winsize = '50%'

" Search results window positions
let g:ctrlsf_position = 'bottom'

" Indentation level of search results
let g:ctrlsf_indent = 0

" Number of lines above and below search result
let g:ctrlsf_context = '-B 0 -A 0'

" Highlight line in selected file that has search term when opened, also 'p'
let g:ctrlsf_selected_line_hl = 'p'

" Custom mappings
let g:ctrlsf_mapping = {
      \ "quit": "<ESC>",
      \ }
" }}}
" Tmuxline {{{
" Color prefix #[fg=colour##]
" for window numbering (#I)
let g:tmuxline_preset = {
      \'win'  : '#W',
      \'cwin' : '#W',
      \'z'    : ' #S',
      \'options' : {'status-justify' : 'left'}}
" \'a'    : '#S',
" \'b'    : '#(whoami)',
" \'c'    : '#H',
" \'x'    : '#(curl icanhazip.com)',
" \'x'    : 'XXX.XXX.XXX.XXX',
" \'y'    : '%a %b %d',
" \'z'    : '%R %p',

let g:tmuxline_powerline_separators = 0
let g:tmuxline_separators = {
      \ 'left' : '  ',
      \ 'left_alt': ' ',
      \ 'right' : ' ',
      \ 'right_alt' : ' ',
      \ 'space' : '  ' }
" }}}
" YouCompleteMe {{{
" Ensures autocomplete window goes away when you're done with it
let g:ycm_autoclose_preview_window_after_completion=1

" Sets Python 3 path
let g:ycm_python_binary_path = '/usr/bin/python3'
let g:ycm_path_to_python_interpreter = '/usr/bin/python'
" }}}
" MuComplete {{{
" set completeopt+=menuone
" inoremap <expr> <c-e> mucomplete#popup_exit("\<c-e>")
" inoremap <expr> <c-y> mucomplete#popup_exit("\<c-y>")
" inoremap <expr>  <cr> mucomplete#popup_exit("\<cr>")
" set completeopt+=noselect
" set completeopt+=noinsert
" set shortmess+=c   " Shut off completion messages
" set belloff+=ctrlg " If Vim beeps during completion
" let g:mucomplete#enable_auto_at_startup = 1
" }}}
" VimCompletesMe {{{
" autocmd FileType text,markdown let b:vcm_tab_complete = 'dict'
" }}}
" FZF {{{
set rtp+=~/.fzf
set rtp+=/usr/local/opt/fzf
set rtp+=/u/b/r/bradleyd/.linuxbrew/bin/fzf
" }}}
" IndentLine {{{
set conceallevel=1
let g:indentLine_conceallevel=1
let g:indentLine_color_term = 239
" let g:indentLine_char = '┆'
" }}}
" Closetag {{{
let g:closetag_filenames="*.html,*.xhtml,*.phtml"
" }}}
" Commentary {{{
autocmd FileType apache setlocal commentstring=#\ %s
" }}}
" Last-place {{{
let g:lastplace_ignore = "gitcommit,svn"
" }}}
" Emmet {{{
let g:user_emmet_leader_key=','
" }}}
" Goyo {{{
let g:goyo_width=80
let g:goyo_height=80
" }}}
" Vim-slash {{{
noremap <plug>(slash-after) zz
" }}}
" Flake8 {{{
let g:flake8_quickfix_height = 10
" autocmd BufWritePost *.py call Flake8()
" }}}
" Deoplete {{{
let g:deoplete#enable_at_startup = 1
" }}}
" Supertab {{{
let g:SuperTabDefaultCompletionType = "<c-n>"
" }}}
" Polyglot {{{
let g:polyglot_disabled = ['py']
" }}}
" LaTeX Live Preview {{{
autocmd Filetype tex setl updatetime=1
let g:livepreview_previewer = 'open -a Preview'
" }}}
" let g:signify_vcs_cmds = {
"   \ 'svn': 'svn diff --internal-diff -x -u0 -- %f'
"   \ }
let g:signify_vcs_cmds = {
    \ 'svn': 'svn diff -x -U0 -- %f'
    \ }
" }}}

" Keybindings {{{
" Leader {{{
map <space> <leader>
" let mapleader = " "
" if has('nvim')
"   let mapleader = " "
" else
"   nmap <space> <leader>
" endif

" Auto indent/retab whole file and return to same line
nnoremap <leader>if mzgg=G`zzz :delmarks z<CR>
nnoremap <leader>rt :%retab!<CR>

" Update diff
nnoremap <leader>du :diffupdate<CR>

" Show buffer list
nnoremap <leader>bl :ls<CR>

" Rename file
nnoremap <leader>rn :Rename

" Turn off search highlight
nnoremap <leader><esc> :nohlsearch<CR>
nnoremap <leader><space> :nohlsearch<CR>
" nnoremap <leader>nh :nohlsearch<CR>

" Show/hide invisibles
nnoremap <leader>il :IndentLinesToggle<CR>

" Toggle Paste mode
set pastetoggle=<leader>pm

" Remove all marks
nnoremap <leader>rm :delmarks a-z A-Z<CR>

" Tmuxline snapshot
" nnoremap <leader>ts :TmuxlineSnapshot! ~/.tmux/snapshot.conf<CR>

" Tagbar
nnoremap <leader>tb :TagbarToggle<CR>

" Syntastic toggle
nnoremap <leader>sy :SyntasticToggleMode<CR>

" Sort lines
vnoremap <leader>sl :sort<CR>

" Make SQL pretty
vnoremap <leader>fs :s/\<update\>\\|\<select\>\\|\<from\>\\|\<where>\\|\<left join\>\\|\<inner join\>\\|\<group by\>\\|\<order by\>/\r\U&/ge<cr><esc>

" Comment out selection
map <leader>cc :Commentary<CR>
" }}}
" Control {{{
" Replace selected word
vnoremap <C-r> "hy:%s/<C-r>h//gc<left><left><left>

" Tmux will send xterm-style keys when its xterm-keys option is on
" let g:BASH_Ctrl_j = 'off'
" let g:C_Ctrl_j = 'off'
if &term =~ '^screen'
  execute "set <xUp>=\e[1;*A"
  execute "set <xDown>=\e[1;*B"
  execute "set <xRight>=\e[1;*C"
  execute "set <xLeft>=\e[1;*D"
endif
" }}}
" Misc {{{
" Make escape kill highlighting
" nnoremap <esc> :noh<return><esc>

" Move more quickly with shift
nnoremap <silent> H bh
nnoremap <silent> J }
nnoremap <silent> K {
nnoremap <silent> L el

" Use semicolon for command mode
noremap ; :

" Paste in visual mode will delete to the black hole register to not clobber yanked content
xnoremap p "_dP

" Dot command in visual mode
vnoremap . :norm.<CR>

" Yank to the end of a line, instead of the whole line
nnoremap Y y$

" Move to beginning/end of line
nnoremap B ^
nnoremap E $

" Visually select the text that was last edited/pasted
nnoremap gV `[v`]

" Exit insert mode
inoremap hh <Esc>
inoremap jj <Esc>
inoremap kk <Esc>
inoremap jk <Esc>
inoremap kj <Esc>
inoremap ii <Esc>
inoremap ZZ <Esc> ZZ

" Navigate wrapped lines
" nnoremap <silent> k gk
" nnoremap <silent> j gj
" nnoremap <silent> 0 g0
" nnoremap <silent> $ g$
" nnoremap <silent> ^ g^
" nnoremap <silent> _ g_

" If using vim-latexsuite, disable to preserve c-hjkl bindings
if &filetype != 'tex'
  imap #$ IMAP_JumpForward
  nmap #$ IMAP_JumpForward
  vmap #$ IMAP_JumpForward
  vmap #$ IMAP_DeleteAndJumpForward
  " imap IMAP_JumpForward
  " nmap IMAP_JumpForward
  " vmap IMAP_JumpForward
  " vmap IMAP_DeleteAndJumpForward
endif
" }}}
" Plugin {{{
nnoremap <C-T> :NERDTreeToggle %<CR>

" Easy commenting (not _, actually /)
" nmap <C-_> :Commentary<CR>
" vmap <C-_> :Commentary<CR>
map <C-_> :Commentary<CR>

" YouCompleteMe
" nnoremap <C-Y> :YcmCompleter GoToDefinitionElseDeclaration<CR>

" ExpandRegion
vmap v <Plug>(expand_region_expand)
vmap V <Plug>(expand_region_shrink)
" }}}
" Folding {{{
nnoremap <CR> za

" function! FoldingEnter()
"   if &buftype ==# 'quickfix'
"     execute "normal! \<CR>"
"   else
"     normal! za
"   endif
" endfunction
" nnoremap <CR> :call FoldingEnter()<CR>

" Open/close all folds
nnoremap <leader>of zR
nnoremap <leader>cf zM
" }}}
" Indenting {{{
" Maintain visual selection when moving indents
vnoremap < <gv
vnoremap > >gv

" Bubble lines
nnoremap <C-Up> ddkP
vnoremap <C-Up> xkP`[V`]
nnoremap <C-Down> ddp
vnoremap <C-Down> xp`[V`]
nnoremap <C-Left> <<
vnoremap <C-Left> <gv
nnoremap <C-Right> >>
vnoremap <C-Right> >gv
" }}}
" Cut/Copy/Paste {{{
" Copy to system clipboard
vnoremap <C-C> "+y

" Cut to system clipboard
vnoremap <C-X> "+x

" Paste from system clipboard
vnoremap <C-V> "+gp
inoremap <C-V> <esc>:set paste<CR>"+gp:set nopaste<CR>a
" }}}
" Fugitive {{{
nnoremap <leader>gs :Gstatus<CR>
nnoremap <leader>gb :Gblame<CR>
nnoremap <leader>gc :Gcommit -a<CR>
" nnoremap <leader>gd :Gdiff<CR>
nnoremap <leader>gd :Gsdiff<CR>
nnoremap <leader>gg :Ggrep
nnoremap <leader>gl :Glog<CR>
" nnoremap <leader>gp :Git pull<CR>
nnoremap <leader>gp :Gpull<CR>
" nnoremap <leader>gP :Git push<CR>
nnoremap <leader>gP :Gpush<CR>
nnoremap <leader>gw :Gbrowse<CR>
" }}}
" FZF {{{
nnoremap <C-O> :Files<CR>
nnoremap <C-G> :Files $HOME<CR>
nnoremap <C-P> :Tags<CR>
" Search current buffer for pattern
" nnoremap <C-E> :BLines<CR>
" Search vim command history
" nnoremap <C-D> :History:<CR>
" }}}
" CtrlSF {{{
" Toggle CtrlSF window
nnoremap <C-F><C-F> :CtrlSFToggle<CR>
" New search
nmap     <C-F>n <Plug>CtrlSFPrompt
" Find word under cursor
nmap     <C-F>f <Plug>CtrlSFCwordExec
vmap     <C-F>f <Plug>CtrlSFVwordExec
" Find word under cursor + additional text
nmap     <C-F>F <Plug>CtrlSFCwordPath
vmap     <C-F>F <Plug>CtrlSFVwordPath
" }}}
" Plug {{{
command! PU PlugUpdate | PlugUpgrade
nnoremap <leader>pi :PlugInstall<CR>
nnoremap <leader>pu :PU<CR>
nnoremap <leader>pc :PlugClean!<CR>
nnoremap <leader>pd :PlugDiff<CR>
nnoremap <leader>ps :PlugStatus<CR>
" }}}
" Terminal {{{
" if has('nvim')
"   tnoremap <C-I> <C-\><C-n>:bnext<CR>
"   tnoremap <C-U> <C-\><C-n>:bprevious<CR>
"   tmap <esc> <c-\><c-n>
"   " tmap <esc> <c-\><c-n><esc><cr>
" endif
" }}}
" Saving/exiting {{{
" map <C-S> <esc>:w<CR>
nmap <C-S> :w<CR>
imap <C-S> <esc>:w<CR>
map <C-Q> <esc>:q!<CR>
" }}}
" Vimrc {{{
nnoremap <leader>ev :edit $MYVIMRC<CR>
nnoremap <leader>sv :source $MYVIMRC<CR>
" }}}
" Splits {{{
nnoremap <leader>v :vnew<CR>
nnoremap <leader>h :new<CR>
" }}}
" Buffer Navigation {{{
nnoremap <C-I> :bnext<CR>
nnoremap <C-U> :bprevious<CR>
nnoremap <C-N> :enew<CR>
nnoremap <C-W> :bprevious <BAR> bd #<CR>
" }}}
" Color Column {{{
if has("colorcolumn")
  let &colorcolumn=join(range(81,1024),',')
  let s:color_column_old = 0
  function! ToggleColorColumn()
    if s:color_column_old == 0
      let s:color_column_old = &colorcolumn
      windo let &colorcolumn = 0
    else
      windo let &colorcolumn=s:color_column_old
      let s:color_column_old = 0
    endif
  endfunction
  nnoremap <leader>col :call ToggleColorColumn()<CR>
endif
" }}}
" Easy Align {{{
nnoremap <leader>ea <Plug>(EasyAlign)
xmap <leader>ea <Plug>(EasyAlign)
" }}}
" Whitespace {{{
nnoremap <leader>sws :StripWhitespace<CR>
nnoremap <leader>ws :ToggleWhitespace<CR>
" }}}
" }}}

" General Configuration {{{
set path+=**              " Helps with gf (goto file, useful for getting to headers)
set backspace=2           " Backspace deletes like most programs in insert mode
set lazyredraw            " Redraw only when need to
set modelines=1           " Have vim check just final line of file for modeline (tab info)
set history=1000          " How many lines of command history vim has to remember
" set autoread              " Set to auto read when a file is changed from the outside
set magic                 " Change the way backslashes are used in search patterns
set nostartofline         " Keep cursor in the same column for longe range motion commands
set more                  " Use more prompt
set nojoinspaces          " Prevents inserting two spaces after punctuation on a join (J)
set ttyfast               " Current terminal is fast, so more stuff can be sent at once
set iskeyword+=-          " Adds hyphens to what vim considers 'words'
set t_Co=16               " Allow color schemes to do bright colors without forcing bold
set modifiable            " Make buffers modifiable
set noshowmode            " Do not show mode info as Lightline will do so

" Timeouts/etc
set updatetime=200       " Update time of many vim things
set notimeout            " Don't timeout on mappings
set timeoutlen=1000      " Used for mapping delays, more time for macros
set ttimeout             " Do timeout on terminal key codes
set ttimeoutlen=50       " Make esc work faster
set mat=2                " How many tenths of a second to blink when matching

" UI
set mouse=nvi            " Enable mouse in normal, visual, and insert modes
set mousehide            " Hide mouse while typing
set cmdheight=1          " Height of the command bar
set cursorline           " Highlights the current line
" set cursorcolumn         " Highlights the current column
" if has("relativenumber")
"   set relativenumber       " Sets relative number lines
" endif
set number               " See current line number in gutter
" set ruler                " Show the cursor position all the time
set showcmd              " Display incomplete commands
set showmatch            " Highlight matching parenthesis
set laststatus=0         " Always display the status line
set scrolloff=15         " Buffer of lines when scrolling vertically
set sidescrolloff=15     " Buffer of lines when scrolling horizontally

" Don't wrap text
set nowrap
set textwidth=0
set wrapmargin=0

" Set and configure title to look like: Vim /path/to/file. Removed due to
" showing up in editor area
" set title
" set titlestring=VIM:\ %-25.55F\ %a%r%m titlelen=70

" Searching
set ignorecase           " Ignore case when searching
set smartcase            " Smart case when searching
" set incsearch            " Search as characters are entered
set hlsearch             " Highlight search matches

" Configure backspace so it acts as it should
set backspace=eol,start,indent

" Allow these motions to wrap lines when moving around horizontally
set whichwrap+=<,>,h,l

" Open new split panes to the right and bottom
set splitbelow
set splitright

" Folding
set foldenable
set foldlevelstart=0      " Open most folds by default
set foldlevelstart=10      " Open most folds by default
set foldnestmax=10         " Max number of folds
set foldmethod=indent
" set foldlevel=99
" set foldmethod=expr
"   \ foldexpr=lsp#ui#vim#folding#foldexpr()
"   \ foldtext=lsp#ui#vim#folding#foldtext()

" Use unix as the standard file type
set ffs=unix,mac,dos

" Cool tab completion stuff
" set wildmenu
set wildmode=list:longest,full
set wildignore=*.o,*~,*.pyc,*.svn,*.swp,*.zip

" No annoying sounds on errors
" set noerrorbells
" set novisualbell
" set t_vb=
" set tm=500

" Turn backup off, since most stuff is in Git, or SVN anyway
set nobackup
set nowritebackup
set noswapfile

" This allows buffers to be hidden if you've modified a buffer
" This is almost a must if you wish to use buffers in this way
set hidden

" COC lsp stuff
" utf-8 byte sequence
set encoding=utf-8
" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved
set signcolumn=yes
" }}}
" Syntax Highlighting {{{
" Set up for colorscheme
set background=dark
let g:solarized_termcolors=16
let g:solarized_termtrans=1
" let g:solarized_degrade=0
" let g:solarized_bold=1
" let g:solarized_underline=1
" let g:solarized_italic=1
" let g:solarized_contrast="normal" " or high or low
" let g:solarized_visibility="normal" " or high or low

try
  colorscheme solarized
  " colorscheme flattened_dark
  " colorscheme solarized8_dark
catch /^Vim\%((\a\+)\)\=:E185/
  colorscheme torte
endtry

syntax on
" }}}
" Highlights {{{
" highlight Normal ctermbg=None
" highlight NonText ctermbg=None
" highlight ColorColumn ctermbg=8

" Folds
" highlight Folded cterm=None

" Trailing whitespace
highlight ExtraWhitespace ctermbg=Red

" Search
" highlight Search ctermfg=0 ctermbg=7 term=bold,underline
highlight Search ctermfg=8 ctermbg=7
highlight IncSearch ctermfg=8 ctermbg=7

" CtrlSF
highlight Title ctermbg=None ctermfg=136 term=None
highlight MatchParen ctermbg=8 ctermfg=252

" Sign column fix for 16 colors
highlight lineAdded         ctermbg=0
highlight lineModified      ctermbg=0
highlight lineRemoved       ctermbg=0
highlight FoldColumn        ctermbg=0
highlight DiffAdd           ctermbg=0
highlight DiffChange        ctermbg=0
highlight DiffDelete        ctermbg=0
highlight DiffText          ctermbg=0
highlight SignColumn        ctermbg=0
highlight CursorLineNr      ctermbg=0
highlight SignatureMarkText ctermbg=0
" }}}
" Resume Last Cursor position {{{
if has("autocmd")
  autocmd BufReadPost *
        \ if line("'\"") > 0 && line ("'\"") <= line("$") |
        \   exe "normal g'\"" |
        \ endif
endif
" }}}
" Turn Off Cursorline in Insert Mode {{{
" autocmd InsertEnter,InsertLeave * set cul!
" }}}
" Spellchecking {{{
" set spell
" set spelllang=en_us
" set spellfile=~/.vim/en.utf-8.add
" set complete+=kspell

" Shortcuts/Abbreviations file
" source ~/.vim/abbreviations.vim

" Personal dictionary
" set dictionary+=~/.vim/dictionary
" }}}
" System Clipboard {{{
" Requires vim to be compiled with clipboard support
if has("clipboard")
  set clipboard=unnamed
  " set clipboard=unnamed,unnamedplus
endif
" X11 support
if has("unnamedplus")
  set clipboard=unnamed,unnamedplus
endif
" }}}
" Tmux/Split Navigation {{{
" Works locally and in remote tmux session
if exists('$TMUX')
  function! TmuxOrSplitSwitch(wincmd, tmuxdir)
    let previous_winnr = winnr()
    silent! execute "wincmd " . a:wincmd
    if previous_winnr == winnr()
      call system("tmux select-pane -" . a:tmuxdir)
      redraw!
    endif
  endfunction

  let previous_title = substitute(system("tmux display-message -p '#{pane_title}'"), '\n', '', '')
  let &t_ti = "\<Esc>]2;vim\<Esc>\\" . &t_ti
  let &t_te = "\<Esc>]2;". previous_title . "\<Esc>\\" . &t_te

  nnoremap <silent> <C-h> :call TmuxOrSplitSwitch('h', 'L')<cr>
  nnoremap <silent> <C-j> :call TmuxOrSplitSwitch('j', 'D')<cr>
  nnoremap <silent> <C-k> :call TmuxOrSplitSwitch('k', 'U')<cr>
  nnoremap <silent> <C-l> :call TmuxOrSplitSwitch('l', 'R')<cr>
else
  map <C-h> <C-w>h
  map <C-j> <C-w>j
  map <C-k> <C-w>k
  map <C-l> <C-w>l
endif

if has('nvim')
  nmap <C-h> <C-w>h
else
  nmap <BS> :<C-u>TmuxNavigateLeft<CR>
endif
" }}}
" Persistent Undo {{{
let vim_directory = '$HOME/.vim'
let &runtimepath.=','.vim_directory

" if has("undofile")
if has('persistent_undo')
  let undo_directory = expand(vim_directory . '/undo')

  " Create dirs
  call system('mkdir ' . vim_directory)
  call system('mkdir ' . undo_directory)

  let &undodir = undo_directory
  set undofile
  set undolevels=1000         " How many undos
  set undoreload=10000        " Number of lines to save for undo
endif
" endif
" }}}
" Help File {{{
" Follow tag
au filetype help nnoremap <buffer><cr> <c-]>
" Go back
au filetype help nnoremap <buffer><bs> <c-T>
au filetype help nnoremap <buffer>q :q<CR>
au filetype help nnoremap <buffer><esc> :q<CR>
au filetype help set nonumber
" }}}
" Netrw {{{
" let g:netrw_liststyle = 3
" let g:netrw_banner = 0
" let g:netrw_winsize = 30
" let g:netrw_browsesplit = 4
" let g:netrw_altv = 1
" }}}
" Tab Complete {{{
" function! s:tab_complete()
"   " is completion menu open? cycle to next item
"   if pumvisible()
"     return "\<c-n>"
"   endif

"   " is there a snippet that can be expanded?
"   " is there a placholder inside the snippet that can be jumped to?
"   if neosnippet#expandable_or_jumpable()
"     return "\<Plug>(neosnippet_expand_or_jump)"
"   endif

"   " if none of these match just use regular tab
"   return "\<tab>"
" endfunction
" imap <silent><expr><TAB> <SID>tab_complete()
" }}}
" Mac Specific {{{
" Neovim on Mac
" if has('mac')
  " let g:python2_host_prog = '/usr/local/bin/python'
  " let g:python2_host_prog = '/usr/bin/python'
  " let g:python3_host_prog = '/usr/local/bin/python3'
" endif
" }}}














































































































" vim:foldmethod=marker foldlevel=0
